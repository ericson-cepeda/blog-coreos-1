# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  ''      '';
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';

access_log /var/log/nginx/access.log vhost;
error_log /var/log/nginx/error.log;

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

# Nginx to use SkyDNS
resolver {{getenv "HOST_IP"}} valid=5s;
resolver_timeout 5s;

{{ $region := (getenv "REGION") }}
{{ $domain := (getenv "DOMAIN") }}
{{ $trusted := (getenv "TRUSTED") }}

{{ range $upstream := lsdir "/skydns/local/ui" }}
upstream {{ base $upstream }}.ui {
    {{$server := (printf "/skydns/local/ui/%s/*" $upstream)}}{{range gets $server}}
    server {{$data := json .Value}}{{$data.host}}:{{$data.port}};
    {{end}}
}
upstream {{ base $upstream }}.sticky.ui {
    ip_hash;
    {{$server := (printf "/skydns/local/ui/%s/*" $upstream)}}{{range gets $server}}
    server {{$data := json .Value}}{{$data.host}}:{{$data.port}};
    {{end}}
}
{{ end }}

{{ range $upstream := lsdir "/skydns/local/ssl" }}
upstream {{ base $upstream }}.ssl {
    {{$server := (printf "/skydns/local/ssl/%s/*" $upstream)}}{{range gets $server}}
    server {{$data := json .Value}}{{$data.host}}:{{$data.port}};
    {{end}}
}
upstream {{ base $upstream }}.sticky.ssl {
    ip_hash;
    {{$server := (printf "/skydns/local/ssl/%s/*" $upstream)}}{{range gets $server}}
    server {{$data := json .Value}}{{$data.host}}:{{$data.port}};
    {{end}}
}
{{ end }}

{{ range $upstream := lsdir "/skydns/local/pwd" }}
upstream {{ base $upstream }}.pwd {
    {{$server := (printf "/skydns/local/pwd/%s/*" $upstream)}}{{range gets $server}}
    server {{$data := json .Value}}{{$data.host}}:{{$data.port}};
    {{end}}
}
upstream {{ base $upstream }}.sticky.pwd {
    ip_hash;
    {{$server := (printf "/skydns/local/pwd/%s/*" $upstream)}}{{range gets $server}}
    server {{$data := json .Value}}{{$data.host}}:{{$data.port}};
    {{end}}
}
{{ end }}

server {
    listen 80;
    listen [::]:80;
    server_name ~^(?<app_domain>[^\.]+?)(?<app_sticky>\.sticky)?(\.{{$region}})?(?<services>\.services)?\.{{$domain}}$;

    # It to us is necessary for making that nginx used local DNS. In another way nginx does not fathom
    # set $dns $app_domain.ui.local;

    #
    # Wide-open CORS config for nginx
    #
    location / {
        if ($request_method = 'OPTIONS') {
           add_header 'Access-Control-Allow-Origin' '*';
           #
           # Om nom nom cookies
           #
           add_header 'Access-Control-Allow-Credentials' 'true';
           add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
           #
           # Custom headers and headers various browsers *should* be OK with but aren't
           #
           add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
           #
           # Tell client that this pre-flight info is valid for 20 days
           #
           add_header 'Access-Control-Max-Age' 1728000;
           add_header 'Content-Type' 'text/plain charset=UTF-8';
           add_header 'Content-Length' 0;
           return 204;
        }
        if ($request_method = 'POST') {
           add_header 'Access-Control-Allow-Origin' '*';
           add_header 'Access-Control-Allow-Credentials' 'true';
           add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
           add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
        }
        if ($request_method = 'GET') {
           add_header 'Access-Control-Allow-Origin' '*';
           add_header 'Access-Control-Allow-Credentials' 'true';
           add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
           add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
        }    
    }
    
    location ~ (/(?<app>[^/]+?)/|/) {
        if ($request_method = 'OPTIONS') {
           add_header 'Access-Control-Allow-Origin' '*';
           #
           # Om nom nom cookies
           #
           add_header 'Access-Control-Allow-Credentials' 'true';
           add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
           #
           # Custom headers and headers various browsers *should* be OK with but aren't
           #
           add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
           #
           # Tell client that this pre-flight info is valid for 20 days
           #
           add_header 'Access-Control-Max-Age' 1728000;
           add_header 'Content-Type' 'text/plain charset=UTF-8';
           add_header 'Content-Length' 0;
           return 204;
        }
        if ($request_method = 'POST') {
           add_header 'Access-Control-Allow-Origin' '*';
           add_header 'Access-Control-Allow-Credentials' 'true';
           add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
           add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
        }
        if ($request_method = 'GET') {
           add_header 'Access-Control-Allow-Origin' '*';
           add_header 'Access-Control-Allow-Credentials' 'true';
           add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
           add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
        }    
    
        set $api $app_domain;
        if ($services ~ ".services") {
            set $api $app;
        }
        proxy_pass http://$api$app_sticky.ui;
        proxy_redirect off;
    }
}

server {
    listen 8080;
    server_name ~^(?<app_domain>.+?)_(?<app_port>.+?)\.local$;

    # It to us is necessary for making that nginx used local DNS. In another way nginx does not fathom
    set $dns $app_domain.local;

    location / {
        proxy_pass $dns:$app_port;
        proxy_redirect off;
    }
}

server {
    listen              443 default_server deferred ssl spdy;
    server_name         _;
    return 503;

    # SSL configuration
    # ssl_stapling on;
    # ssl_stapling_verify on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;

    ssl_prefer_server_ciphers on;
    ssl_session_timeout 7m;
    ssl_session_cache shared:SSL:32m;
    ssl_buffer_size 8k;
    
    
    {{if eq $trusted "1"}}
    # Should be trusted certificate from issuing authority
    ssl_trusted_certificate /etc/nginx/certs/trusted.crt;
    {{else}}
    ssl_certificate /etc/nginx/certs/default.crt;
    ssl_certificate_key /etc/nginx/certs/default.key;
    {{end}}

    add_header Strict-Transport-Security "max-age=31536000";
}

server {
    listen 443;
    server_name ~^(?<app_domain>[^\.]+?)\.pwd(?<app_sticky>\.sticky)?(\.{{$region}})?\.{{$domain}}$;

    # It to us is necessary for making that nginx used local DNS. In another way nginx does not fathom
    # set $dns $app_domain.pwd.local;

    location / {
        proxy_pass http://$app_domain$app_sticky.pwd;
        proxy_redirect off;
		auth_basic "Restricted $app_domain";
		auth_basic_user_file "/etc/nginx/.htpasswd";
    }
}

server {
    listen 443;
    server_name ~^(?<app_domain>[^\.]+?)(?<app_sticky>\.sticky)?(\.{{$region}})?\.{{$domain}}$;

    # It to us is necessary for making that nginx used local DNS. In another way nginx does not fathom
    # set $dns $app_domain.ssl.local;

    location / {
        proxy_pass http://$app_domain$app_sticky.ssl;
        proxy_redirect off;
    }
}
