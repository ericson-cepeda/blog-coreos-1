# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  ''      '';
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';

access_log /var/log/nginx/access.log vhost;
error_log /var/log/nginx/error.log;

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;

# Nginx to use SkyDNS
resolver {{env "HOST_IP"}} valid=5s;
resolver_timeout 5s;

{{ $region := (env "REGION") }}
{{ $domain := (env "DOMAIN") }}

{{ range $tag, $services := service "ui" | byTag }}
upstream {{ $tag }}.ui {
{{range $service := $services}} server {{$service.Address}}:{{$service.Port}}
{{ end }}
upstream {{ $tag }}.sticky.ui {
ip_hash;
{{range $service := $services}} server {{$service.Address}}:{{$service.Port}}
{{ end }}
}{{ end }}

{{ range $tag, $services := service "pwd" | byTag }}
upstream {{ $tag }}.pwd {
{{range $service := $services}} server {{$service.Address}}:{{$service.Port}}
{{ end }}
upstream {{ $tag }}.sticky.pwd {
ip_hash;
{{range $service := $services}} server {{$service.Address}}:{{$service.Port}}
{{ end }}
}{{ end }}

{{ range $tag, $services := service "ssl" | byTag }}
upstream {{ $tag }}.ssl {
{{range $service := $services}} server {{$service.Address}}:{{$service.Port}}
{{ end }}
upstream {{ $tag }}.sticky.ssl {
ip_hash;
{{range $service := $services}} server {{$service.Address}}:{{$service.Port}}
{{ end }}
}{{ end }}

server {
    listen 80;
    server_name ~^(?<app_domain>[^\.]+?)(?<app_sticky>\.sticky)?(\.{{$region}})?\.{{$domain}}$;

    # It to us is necessary for making that nginx used local DNS. In another way nginx does not fathom
    # set $dns $app_domain.ui.local;

    location / {
        proxy_pass http://$app_domain$app_sticky.ui;
        proxy_redirect off;
    }
}

server {
    listen              443 default_server deferred ssl spdy;
    server_name         _;
	return 503;

	# SSL configuration
    # ssl_stapling on;
    # ssl_stapling_verify on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;

    ssl_prefer_server_ciphers on;
    ssl_session_timeout 7m;
    ssl_session_cache shared:SSL:32m;
    ssl_buffer_size 8k;

    ssl_certificate /etc/nginx/certs/default.crt;
    ssl_certificate_key /etc/nginx/certs/default.key;

    # Should be trusted certificate from issuing authority
    # ssl_trusted_certificate /etc/nginx/certs/default.crt;

    add_header Strict-Transport-Security "max-age=31536000";
}

server {
    listen 443;
    server_name ~^(?<app_domain>[^\.]+?)\.pwd(?<app_sticky>\.sticky)?(\.{{$region}})?\.{{$domain}}$;

    # It to us is necessary for making that nginx used local DNS. In another way nginx does not fathom
    # set $dns $app_domain.pwd.local;

    location / {
        proxy_pass http://$app_domain$app_sticky.pwd;
        proxy_redirect off;
		auth_basic "Restricted $app_domain";
		auth_basic_user_file "/etc/nginx/.htpasswd";
    }
}

server {
    listen 443;
    server_name ~^(?<app_domain>[^\.]+?)(?<app_sticky>\.sticky)?(\.{{$region}})?\.{{$domain}}$;

    # It to us is necessary for making that nginx used local DNS. In another way nginx does not fathom
    # set $dns $app_domain.ssl.local;

    location / {
        proxy_pass http://$app_domain$app_sticky.ssl;
        proxy_redirect off;
    }
}
